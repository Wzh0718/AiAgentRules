# 项目通用规范
每一次对话都需要严格执行 `核心交互模型：问题思考` 的全部内容。

## 核心交互模型：问题思考 (Core Interaction Model: Problem Thinking)
这是本规范的核心，定义了每一轮对话必须遵循的思考与行动路径。

### 第一步：Topic识别与历史记忆评估 (Topic Identification & Memory Assessment)
1. 解析当前问题：必须通过调用`MCP`服务中的`sequential-thinking`来识别用户当前对话的核心意图、涉及的文件路径、技术栈等关键信息。
2. 生成临时Topic：基于上述信息，为当前问题生成一个临时的Topic B。
3. 匹配历史记忆：
    - 读取 @cursor_thinking.md 中记录的Topic A。
        - 提示：如果不存在 @cursor_thinking.md，则需要创建
    - 通过语义匹配算法，计算Topic A与Topic B的相似度。
4. 决策记忆策略：
    - 如果相似度 < 90% (弱关联或新问题)：认定历史记忆不适用。在第六步中，将用Topic B的内容 覆盖 @cursor_thinking.md。
    - 如果相似度 >= 90% (强关联问题)：认定历史记忆高度相关。将读取 @cursor_thinking.md 的完整内容，作为本次对话的上下文基础。Topic B将被视为Topic A的延续。
### 第二步：问题解构与分析 (Problem Deconstruction & Analysis)
1. 精准定位：明确问题发生的具体位置（文件路径、类名、方法名、代码行数）。
2. 需求拆分：将复杂问题拆解为多个具体的、可执行的子需求。
3. 优先级排序：根据主次关系和依赖关系，对子需求进行优先级排序。
4. 结合历史记忆：如果第一步判定为强关联(>=90%)，需将历史解决方案和上下文引入，优化当前的子需求列表，避免重复思考。
### 第三步：代码现状分析 (Current Code Analysis)
1. 理解代码上下文：基于第二步的定位，深入理解相关代码片段的现有逻辑和设计
2. 强制获取最新代码：必须 通过调用`MCP服务`中的`Context7服务`，获取问题所涉及文件的最新、最完整的代码内容和相关依赖库信息。
3. 综合分析：结合用户问题、历史记忆（如果适用）和最新的代码现状，形成对问题的完整立体认知。
### 第四步：解决方案设计与呈现 (Solution Design & Presentation)
1. 制定方案：遵循`通用开发原则`，为每个子需求制定清晰、高效的解决方案。优先考虑复用现有代码，避免引入不必要的复杂性。
2. 代码实现：编写符合代码风格和SQL规范的具体代码。
3. 结构化输出：以标准格式向用户呈现最终解决方案。
    ```
    [目标]
    简明扼要地说明本次方案要实现的核心目标。

    [问题定位]
    - 文件: `path/to/your/file.py`
    - 类: `ClassName`
    - 方法: `method_name`
    - 行数: `10-25`

    [解决方案]
    1.  **步骤一**：详细说明第一步操作，例如 "修改 `method_name` 方法的返回值"。
        ```python
        # 对应的代码实现
        def method_name():
            """
            Google-style docstring for the method.
            """
            return {'status': 'optimized'}
        ```
    2.  **步骤二**：详细说明第二步操作，例如 "新增一个辅助函数 `_helper_function`"。
        ```python
        # 对应的代码实现
        def _helper_function():
            # ...
            pass
        ```
    3.  **SQL语句 (如果适用)**:
        ```sql
        SELECT
        `t`.`中文列名` AS `中文列名`
        FROM
        `table` AS `t`;
    ```
### 第五步：记录与链路追踪 (Recording & Chain Tracing)

1. 用户确认：待用户确认解决方案后，执行记录操作。

2. 更新记忆文件：根据第一步的决策，更新 @cursor_thinking.md 文件。

    - 弱关联 (<90%)：清空文件，写入全新的Topic、对话轮次(重置为1)、技术栈、解决方案等。

    - 强关联 (>=90%)：在原有Topic下追加新一轮的对话内容，对话轮次+1，更新链路文件和解决方案。

3. 构建链路：在 @cursor_thinking.md 中，清晰地记录下本次解决方案涉及的所有文件及其核心改动摘要，形成可追溯的开发链路。

## 通用指导原则 (General Guiding Principles)
这些是贯穿于所有开发活动中的基础规范。

### 技术栈 (Tech Stack)
1. Python版本: 3.9

2. 后端框架: FastAPI

3. 爬虫框架: Playwright (异步)

4. 数据库ORM风格: 遵循所选ORM库的标准表结构定义

### 代码风格 (Code Style)
1. 简洁可读: 保持代码逻辑清晰，易于理解。

2. 命名规范: 严格遵循Python官方PEP 8规范。

3. 变量命名: 采用有意义、自解释的英文命名。

### 注释格式:

1. 函数、方法、类和复杂逻辑块必须添加注释。

2. 注释风格遵循 谷歌Python风格指南 (Google Python Style Guide)。

### 包导入:

1. 所有import语句必须置于文件顶部。

2. 遵循 标准库 -> 第三方库 -> 本地应用 的分组和排序约定。

### 项目结构 (Project Structure)
1. 模块化: 遵循高内聚、低耦合的原则进行模块划分。

2. 面向对象: 优先采用基于类的开发模式，封装逻辑和数据。

### 开发原则 (Development Principles)
1. DRY (Don't Repeat Yourself): 避免编写重复或功能高度类似的代码。将公共功能抽象为通用函数、类或模块。

2. 复用优先: 在着手开发新功能前，优先寻找并使用项目中已存在的库、类或代码。

### SQL规范 (SQL Standards)
1. 列名: 中文列名必须使用反引号 ` 包裹。

2. 别名: table.字段名 的查询方式必须强制使用 AS 关键字指定别名，如 t.column AS column。
3. 输出格式:

    - 当用户明确要求提供SQL时，仅提供格式化后的SQL语句。

    - 在其他情况下，SQL作为解决方案的一部分进行呈现。

4. 数值类型: 涉及计算和存储的数值类型，统一保留两位小数点。




